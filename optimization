{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"기말 문제","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOCc0nbOlTHn7dFqAKJddDn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"CnygtPE-VP8W"},"source":["#1번 문제"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kCDrekmQ_20S","executionInfo":{"status":"ok","timestamp":1623650488824,"user_tz":-540,"elapsed":424,"user":{"displayName":"최지원","photoUrl":"","userId":"16715243072129011133"}},"outputId":"72022b3a-02e2-424e-e3a5-08f3ba30556c"},"source":["import numpy as np\n","from math import *\n","\n","phi = (1.0 + sqrt(5.0))/2.0\n","\n","def golden_section_searcher(X, d, prev_val, lower, upper, epsilon):\n","    \n","    x1 = upper - ((phi - 1)*(upper - lower))\n","    x2 = lower + ((phi - 1)*(upper - lower))\n","    val = x1\n","    \n","    param2 = X - np.dot(x2, d)\n","    param2 = param2.tolist()\n","    \n","    param1 = X - np.dot(x1, d)\n","    param1 = param1.tolist()\n","    \n","    if equation(param2) < equation(param1):\n","        if x1 > x2:\n","            upper = x1\n","        else:\n","            lower = x1\n","\n","    else:\n","        if x2 > x1:\n","            upper = x2\n","        else:\n","            lower = x2\n","\n","    if abs(prev_val - val) <= epsilon:\n","        return val\n","    else:\n","        return golden_section_searcher(X, d, val, lower, upper, epsilon)\n","\n","def derivate(f, X):\n","    h = 0.0000001\n","    delf = []\n","    \n","    for i in range(len(X)):\n","        E = np.zeros(len(X))\n","        E[i] = h\n","        vals = X + E\n","        delf.append((f(vals) - f(X))/h)\n","            \n","    return delf\n","\n","\n","def difference(X, Y):\n","    total = 0\n","    \n","    for i in range(len(X)):\n","        total = total + abs(X[i] - Y[i])\n","    total = total / len(X)\n","    \n","\n","    return total\n","\n","\n","def steepest_descent(X, epsilon):\n","    \n","    while True:\n","        d = derivate(equation, X)\n","        x_prev = X\n","\n","        learning_rate = golden_section_searcher(X, d, 1, -10, 10, 0.0001)\n","        X = X - np.dot(learning_rate, d)\n","        X = X.tolist()\n","        \n","        if difference(x_prev, X) < epsilon:\n","            return x_prev\n","        \n","        \n","    return x_prev\n","\n","def equation(x):\n","    return (x[0]+5)**2 + (x[1]+8)**2 + (x[2]+7)**2 + (2*x[0]**2)*x[1]**2 + (4*x[0]**2)*x[2]**2\n","    \n","inputs = np.array([1,1,1]).transpose()   \n","results = steepest_descent(inputs, 0.0000001)\n","print(steepest_descent(inputs, 0.0000001))"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[-4.5488021279449935, -0.18875409506900576, -0.08356572719773055]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4IhdsHPNG68z"},"source":[""],"execution_count":null,"outputs":[]}]}